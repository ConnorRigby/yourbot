#!/bin/env python3
# Copyright (C) <%= user.discord_oauth.username %>#<%= user.discord_oauth.discriminator %> - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by <%= user.discord_oauth.username %>#<%= user.discord_oauth.discriminator %>, <%= month %> <%= year %>
#
# You're under no obligation to choose a license. A sample one has been provided to you aboce. 
# It's your right not to include one with your code or project, but please be aware of the implications.
# Generally speaking, the absence of a license means that the default copyright laws apply. 
# This means that you retain all rights to your source code and that nobody else may 
# reproduce, distribute, or create derivative works from your work. This might not be what you intend.
# Even if this is what you intend, if you publish your source code in a public code on YourBot, 
# you have accepted the Terms of Service which do allow other YourBot users some rights. 
# Specifically, you allow others to view code within the YourBot site.

import discord
import asyncio
import logging
import os
from datetime import datetime

# Configure logging. 
# You are free to remove this code, however logs will not sent to the web console
logger = logging.getLogger('<%= client_object %>')
logger.setLevel(logging.DEBUG)

# Setup a stream handler to write data to stdout.
# Stdout is piped directly to the web console
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
default_handler = logging.StreamHandler()
default_handler.setFormatter(formatter)

# install the handler
logger.addHandler(default_handler)

# This class is where most of your code should go.
# see the documentation for more information
#   https://discordpy.readthedocs.io/en/stable/api.html#client
class <%= client_object %>(discord.Client):
    def __init__(self, con):
        self.con = con
        super().__init__()

    # This callback is called when your client successfully
    # connects to the discord API
    async def on_ready(self):
        logger.info('Logged on as {0}!'.format(self.user))
        # Example usage of the sqlite database
        # yourbot_event_log is the name of a special table that has
        # been created for you. It contains 4 fields
        # 'name' - String - classification of the event
        # 'content' - String - value of the event
        # 'inserted_at' - utc_date_time
        # 'updated_at' - utc_date_time
        with self.con:
            now = datetime.now()
            cur = con.cursor()
            cur.execute("INSERT INTO yourbot_event_log ('content','name','inserted_at','updated_at') VALUES ('onconnect', ?, ?, ?)", ((self.user.name, now, now)))

    # This callback is called whenever anyone posts a message
    async def on_message(self, message):
        logger.info('Message from {0.author}: {0.content}'.format(message))

# Instanciate a connection to an sqlite database
# this will be used in our client
con = sqlite3.connect(os.environ["DATABASE_URL"])

# Instanciate a client object and start it. 
client = <%= client_object %>(con) 
asyncio.create_task(client.start(os.environ['DISCORD_TOKEN']))